Bootstrap: docker
From: nvidia/cuda:10.0-cudnn7-devel-ubuntu18.04

%post
    export CUDNN_VERSION=7.6.5.32
    export CUDA_VERSION=10.0.130
    export NCCL_VERSION=2.5.6
    export NVIDIA_REQUIRE_CUDA="cuda>=10.0 brand=tesla,driver>=384,driver<385 brand=tesla,driver>=410,driver<411"
    export LIBRARY_PATH=/usr/local/cuda/lib64/stubs
    export LD_LIBRARY_PATH=/usr/local/nvidia/lib:/usr/local/nvidia/lib64
    export NVIDIA_DRIVER_CAPABILITIES=compute,utility
    export PATH=/usr/local/nvidia/bin:/usr/local/cuda/bin:/usr/local/bin:/usr/local/sbin:/usr/sbin:/usr/bin:/sbin:/bin
    export LANG=C.UTF-8
    export LC_ALL=C.UTF-8

    apt-get update
    apt-get install -y --no-install-recommends \
        ca-certificates \
        netbase \
    rm -rf /var/lib/apt/lists/*

    export PYTHON_VERSION=3.7.7

    set -ex \
        \
        && savedAptMark="$(apt-mark showmanual)" \
        && apt-get update && apt-get install -y --no-install-recommends \
            dpkg-dev \
            gcc \
            gnupg \
            libbluetooth-dev \
            libbz2-dev \
            libc6-dev \
            libexpat1-dev \
            libffi-dev \
            libgdbm-dev \
            liblzma-dev \
            libncursesw5-dev \
            libreadline-dev \
            libsqlite3-dev \
            libssl-dev \
            make \
            tk-dev \
            uuid-dev \
            wget \
            xz-utils \
            zlib1g-dev \
        \
        && wget -O python.tar.xz "https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz" \
        && wget -O python.tar.xz.asc "https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz.asc" \
        && export GNUPGHOME="$(mktemp -d)" \
        && gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys "$GPG_KEY" \
        && gpg --batch --verify python.tar.xz.asc python.tar.xz \
        && { command -v gpgconf > /dev/null && gpgconf --kill all || :; } \
        && rm -rf "$GNUPGHOME" python.tar.xz.asc \
        && mkdir -p /usr/src/python \
        && tar -xJC /usr/src/python --strip-components=1 -f python.tar.xz \
        && rm python.tar.xz \
        \
        && cd /usr/src/python \
        && gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)" \
        && ./configure \
            --build="$gnuArch" \
            --enable-loadable-sqlite-extensions \
            --enable-optimizations \
            --enable-option-checking=fatal \
            --enable-shared \
            --with-system-expat \
            --with-system-ffi \
            --without-ensurepip \
        && make -j "$(nproc)" \
            LDFLAGS="-Wl,--strip-all" \
    # setting PROFILE_TASK makes "--enable-optimizations" reasonable: https://bugs.python.org/issue36044 / https://github.com/docker-library/python/issues/160#issuecomment-509426916
            PROFILE_TASK='-m test.regrtest --pgo \
                test_array \
                test_base64 \
                test_binascii \
                test_binhex \
                test_binop \
                test_bytes \
                test_c_locale_coercion \
                test_class \
                test_cmath \
                test_codecs \
                test_compile \
                test_complex \
                test_csv \
                test_decimal \
                test_dict \
                test_float \
                test_fstring \
                test_hashlib \
                test_io \
                test_iter \
                test_json \
                test_long \
                test_math \
                test_memoryview \
                test_pickle \
                test_re \
                test_set \
                test_slice \
                test_struct \
                test_threading \
                test_time \
                test_traceback \
                test_unicode \
            ' \
        && make install \
        && rm -rf /usr/src/python \
        \
        && find /usr/local -depth \
            \( \
                \( -type d -a \( -name test -o -name tests -o -name idle_test \) \) \
                -o \( -type f -a \( -name '*.pyc' -o -name '*.pyo' -o -name '*.a' \) \) \
                -o \( -type f -a -name 'wininst-*.exe' \) \
            \) -exec rm -rf '{}' + \
        \
        && ldconfig \
        \
        && apt-mark auto '.*' > /dev/null \
        && apt-mark manual $savedAptMark \
        && find /usr/local -type f -executable -not \( -name '*tkinter*' \) -exec ldd '{}' ';' \
            | awk '/=>/ { print $(NF-1) }' \
            | sort -u \
            | xargs -r dpkg-query --search \
            | cut -d: -f1 \
            | sort -u \
            | xargs -r apt-mark manual \
        && apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false \
        && rm -rf /var/lib/apt/lists/* \
        \
        && python3 --version

        # make some useful symlinks that are expected to exist
        cd /usr/local/bin \
        && ln -s idle3 idle \
        && ln -s pydoc3 pydoc \
        && ln -s python3 python \
        && ln -s python3-config python-config

        # if this is called "PIP_VERSION", pip explodes with "ValueError: invalid truth value '<VERSION>'"
        ENV PYTHON_PIP_VERSION 20.2.4
        # https://github.com/pypa/get-pip
        ENV PYTHON_GET_PIP_URL https://github.com/pypa/get-pip/raw/8283828b8fd6f1783daf55a765384e6d8d2c5014/get-pip.py
        ENV PYTHON_GET_PIP_SHA256 2250ab0a7e70f6fd22b955493f7f5cf1ea53e70b584a84a32573644a045b4bfb

        set -ex; \
            \
            savedAptMark="$(apt-mark showmanual)"; \
            apt-get update; \
            apt-get install -y --no-install-recommends wget; \
            \
            wget -O get-pip.py "$PYTHON_GET_PIP_URL"; \
            echo "$PYTHON_GET_PIP_SHA256 *get-pip.py" | sha256sum --check --strict -; \
            \
            apt-mark auto '.*' > /dev/null; \
            [ -z "$savedAptMark" ] || apt-mark manual $savedAptMark; \
            apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false; \
            rm -rf /var/lib/apt/lists/*; \
            \
            python get-pip.py \
                --disable-pip-version-check \
                --no-cache-dir \
                "pip==$PYTHON_PIP_VERSION" \
            ; \
            pip --version; \
            \
            find /usr/local -depth \
                \( \
                    \( -type d -a \( -name test -o -name tests -o -name idle_test \) \) \
                    -o \
                    \( -type f -a \( -name '*.pyc' -o -name '*.pyo' \) \) \
                \) -exec rm -rf '{}' +; \
            rm -f get-pip.py

        export PY_VER=37
        export TENSORFLOW_VERSION=2.1.0

        cd /tmp
        wget --quiet https://storage.googleapis.com/tensorflow/linux/cpu/tensorflow_cpu-${TENSORFLOW_VERSION}-cp${PY_VER}-cp${PY_VER}m-manylinux2010_x86_64.whl
        python -m pip install \
            tensorflow_cpu-${TENSORFLOW_VERSION}-cp${PY_VER}-cp${PY_VER}m-manylinux2010_x86_64.whl
        rm tensorflow_cpu-${TENSORFLOW_VERSION}-cp${PY_VER}-cp${PY_VER}m-manylinux2010_x86_64.whl

%environment
    export CUDNN_VERSION=7.6.5.32
    export CUDA_VERSION=10.0.130
    export NCCL_VERSION=2.5.6
    export NVIDIA_REQUIRE_CUDA="cuda>=10.0 brand=tesla,driver>=384,driver<385 brand=tesla,driver>=410,driver<411"
    export LIBRARY_PATH=/usr/local/cuda/lib64/stubs
    export LD_LIBRARY_PATH=/usr/local/nvidia/lib:/usr/local/nvidia/lib64
    export NVIDIA_DRIVER_CAPABILITIES=compute,utility
    export PATH=/usr/local/nvidia/bin:/usr/local/cuda/bin:/usr/local/bin:/usr/local/sbin:/usr/sbin:/usr/bin:/sbin:/bin
    export LANG=C.UTF-8
    export LC_ALL=C.UTF-8